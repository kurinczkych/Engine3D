#version 430

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

//struct DrawCommand {
//    uint count;
//    uint instanceCount;
//    uint first;
//    uint baseInstance;
//};
struct Plane {
    vec3 normal;
    float distance;
};
struct Vertex {
    vec4 position;
    vec3 normal;
    vec2 texCoords;
    vec4 color;
    vec3 tangent;
};

//layout(std430, binding = 0) buffer DrawCommands {
//    DrawCommand commands[];
//};

layout(std430, binding = 0) buffer Visibility {
    uint visible[];
};

layout(std430, binding = 1) buffer VertexBuffer {
    Vertex vertices[]; // Buffer containing all vertex data
};

layout(std140, binding = 2) uniform FrustumPlanes {
    Plane planes[6];
};

bool isVertexInFrustum(vec4 vertex) {
    for (int i = 0; i < 6; ++i) {
        if (dot(planes[i].normal, vec3(vertex)) + planes[i].distance < 0) {
            // Vertex is outside this plane
            return false;
        }
    }
    // Vertex is inside all planes
    return true;
}

bool isTriangleInFrustum(uint id) {
    // Calculate indices for the three vertices of the triangle
    uint v0_id = id * 3 + 0;
    uint v1_id = id * 3 + 1;
    uint v2_id = id * 3 + 2;

    // Fetch the positions of the triangle's vertices
    vec4 v0_pos = vertices[v0_id].position;
    vec4 v1_pos = vertices[v1_id].position;
    vec4 v2_pos = vertices[v2_id].position;

    // Perform the frustum culling test
    return isVertexInFrustum(v0_pos) || isVertexInFrustum(v1_pos) || isVertexInFrustum(v2_pos);
}

void main() {
    // Calculate the ID of the triangle this shader is processing
    uint triangleID = gl_GlobalInvocationID.x;

    // Perform the frustum culling test
    bool isInFrustum = isTriangleInFrustum(triangleID);

    // Update the visibility buffer
    visible[triangleID] = isInFrustum ? 1u : 0u;
}

